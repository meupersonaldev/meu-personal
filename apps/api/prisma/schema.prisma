generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  FRANCHISOR
  FRANCHISE_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT_PURCHASE
  BOOKING_PAYMENT
  BOOKING_REFUND
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?   @map("password_hash")
  password      String?   @deprecated("Use password_hash instead")
  name          String
  phone         String?
  role          Role      @default(STUDENT)
  credits       Int       @default(0)
  isActive      Boolean   @default(true) @map("is_active")
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  teacherProfile TeacherProfile?
  studentBookings Booking[] @relation("StudentBookings")
  teacherBookings Booking[] @relation("TeacherBookings")
  transactions    Transaction[]
  reviews         Review[]
  
  @@map("users")
}

model TeacherProfile {
  id            String    @id @default(cuid())
  userId        String    @unique @map("user_id")
  bio           String?
  specialties   String[]
  hourlyRate    Decimal   @db.Decimal(10, 2) @map("hourly_rate")
  rating        Decimal?  @db.Decimal(3, 2)
  totalReviews  Int       @default(0) @map("total_reviews")
  availability  Json      // Armazenar disponibilidade como JSON
  isAvailable   Boolean   @default(true) @map("is_available")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user          User      @relation(fields: [userId], references: [id])
  students      TeacherStudent[]
  
  @@map("teacher_profiles")
}

model TeacherStudent {
  id            String    @id @default(cuid())
  teacherId     String
  name          String
  email         String
  phone         String?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  teacher       TeacherProfile @relation(fields: [teacherId], references: [id])

  @@index([teacherId])
  @@index([email])
}

model Booking {
  id            String        @id @default(cuid())
  studentId     String
  teacherId     String
  date          DateTime
  duration      Int           @default(60) // em minutos
  status        BookingStatus @default(PENDING)
  checkInCode   String?       @unique
  checkedInAt   DateTime?
  notes         String?
  creditsCost   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  student       User          @relation("StudentBookings", fields: [studentId], references: [id])
  teacher       User          @relation("TeacherBookings", fields: [teacherId], references: [id])
  review        Review?

  @@index([date, status])
  @@index([studentId])
  @@index([teacherId])
}

model Review {
  id            String    @id @default(cuid())
  bookingId     String    @unique
  studentId     String
  rating        Int       // 1-5
  comment       String?
  isVisible     Boolean   @default(false) // Fica visível após 7 dias
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  booking       Booking   @relation(fields: [bookingId], references: [id])
  student       User      @relation(fields: [studentId], references: [id])
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int             // em créditos
  description   String
  referenceId   String?         // ID do pagamento Asaas
  createdAt     DateTime        @default(now())

  user          User            @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model CreditPackage {
  id            String    @id @default(cuid())
  name          String
  credits       Int
  price         Decimal   @db.Decimal(10, 2)
  isActive      Boolean   @default(true)
  forRole       Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Setting {
  id            String    @id @default(cuid())
  key           String    @unique
  value         Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Tabelas existentes no Supabase

model Academy {
  id            String    @id @default(uuid())
  name          String
  email         String
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?   @map("zip_code")
  isActive      Boolean   @default(true) @map("is_active")
  openingTime   String?   @default("06:00:00") @map("opening_time")
  closingTime   String?   @default("22:00:00") @map("closing_time")
  checkinTolerance Int?   @default(30) @map("checkin_tolerance")
  schedule      Json?     @default("[]")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("academies")
}

model AcademyTeacher {
  id            String    @id @default(cuid())
  academyId     String    @map("academy_id")
  teacherId     String    @map("teacher_id")
  status        String    @default("active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("academy_teachers")
}

model AcademyStudent {
  id            String    @id @default(cuid())
  academyId     String    @map("academy_id")
  studentId     String    @map("student_id")
  status        String    @default("active")
  joinDate      DateTime  @default(now()) @map("join_date")
  lastActivity  DateTime  @default(now()) @map("last_activity")
  planId        String?   @map("plan_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("academy_students")
}

model AcademyPlan {
  id              String    @id @default(cuid())
  academyId       String    @map("academy_id")
  name            String
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  creditsIncluded Int       @map("credits_included")
  durationDays    Int       @map("duration_days")
  features        Json?
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("academy_plans")
}

model Checkin {
  id            String    @id @default(uuid())
  academyId     String    @map("academy_id")
  teacherId     String    @map("teacher_id")
  bookingId     String?   @map("booking_id")
  status        String
  reason        String?
  method        String    @default("QRCODE")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@map("checkins")
}

model Notification {
  id            String    @id @default(uuid())
  academyId     String    @map("academy_id")
  type          String
  title         String
  message       String
  data          Json?
  isRead        Boolean   @default(false) @map("is_read")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("notifications")
}

model TeacherPreference {
  id            String    @id @default(cuid())
  teacherId     String    @map("teacher_id")
  academyIds    String[]  @map("academy_ids")
  bio           String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("teacher_preferences")
}

model Franqueadora {
  id            String    @id @default(uuid())
  name          String
  email         String
  phone         String?
  cnpj          String?
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("franqueadora")
}

model FranqueadoraAdmin {
  id            String    @id @default(cuid())
  franqueadoraId String  @map("franqueadora_id")
  userId        String    @map("user_id")
  role          String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("franqueadora_admins")
}
