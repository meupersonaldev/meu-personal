generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  FRANCHISOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  CREDIT_PURCHASE
  BOOKING_PAYMENT
  BOOKING_REFUND
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  phone         String?
  role          Role      @default(STUDENT)
  credits       Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  teacherProfile TeacherProfile?
  studentBookings Booking[] @relation("StudentBookings")
  teacherBookings Booking[] @relation("TeacherBookings")
  transactions    Transaction[]
  reviews         Review[]
}

model TeacherProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  bio           String?
  specialties   String[]
  hourlyRate    Decimal   @db.Decimal(10, 2)
  rating        Decimal?  @db.Decimal(3, 2)
  totalReviews  Int       @default(0)
  availability  Json      // Armazenar disponibilidade como JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
}

model Booking {
  id            String        @id @default(cuid())
  studentId     String
  teacherId     String
  date          DateTime
  duration      Int           @default(60) // em minutos
  status        BookingStatus @default(PENDING)
  checkInCode   String?       @unique
  checkedInAt   DateTime?
  notes         String?
  creditsCost   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  student       User          @relation("StudentBookings", fields: [studentId], references: [id])
  teacher       User          @relation("TeacherBookings", fields: [teacherId], references: [id])
  review        Review?

  @@index([date, status])
  @@index([studentId])
  @@index([teacherId])
}

model Review {
  id            String    @id @default(cuid())
  bookingId     String    @unique
  studentId     String
  rating        Int       // 1-5
  comment       String?
  isVisible     Boolean   @default(false) // Fica visível após 7 dias
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  booking       Booking   @relation(fields: [bookingId], references: [id])
  student       User      @relation(fields: [studentId], references: [id])
}

model Transaction {
  id            String          @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Int             // em créditos
  description   String
  referenceId   String?         // ID do pagamento Asaas
  createdAt     DateTime        @default(now())

  user          User            @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model CreditPackage {
  id            String    @id @default(cuid())
  name          String
  credits       Int
  price         Decimal   @db.Decimal(10, 2)
  isActive      Boolean   @default(true)
  forRole       Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Setting {
  id            String    @id @default(cuid())
  key           String    @unique
  value         Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
